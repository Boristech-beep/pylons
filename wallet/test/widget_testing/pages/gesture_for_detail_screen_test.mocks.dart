// Mocks generated by Mockito 5.3.2 from annotations
// in pylons_wallet/test/widget_testing/pages/gesture_for_detail_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i4;
import 'package:pylons_wallet/utils/permission_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i2.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.PermissionStatus> status(_i4.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #status,
          [permission],
        ),
        returnValue:
            _i3.Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.denied),
      ) as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<_i4.PermissionStatus> request(_i4.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [permission],
        ),
        returnValue:
            _i3.Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.denied),
      ) as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
