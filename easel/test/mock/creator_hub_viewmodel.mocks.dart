// Mocks generated by Mockito 5.3.2 from annotations
// in easel_flutter/test/widget/save_as_draft_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:easel_flutter/models/nft.dart' as _i4;
import 'package:easel_flutter/repository/repository.dart' as _i2;
import 'package:easel_flutter/screens/creator_hub/creator_hub_view_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepository_0 extends _i1.SmartFake implements _i2.Repository {
  _FakeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreatorHubViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreatorHubViewModel extends _i1.Mock
    implements _i3.CreatorHubViewModel {
  MockCreatorHubViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i3.CollectionType get selectedCollectionType => (super.noSuchMethod(
        Invocation.getter(#selectedCollectionType),
        returnValue: _i3.CollectionType.draft,
      ) as _i3.CollectionType);
  @override
  set selectedCollectionType(_i3.CollectionType? _selectedCollectionType) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedCollectionType,
          _selectedCollectionType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ViewType get viewType => (super.noSuchMethod(
        Invocation.getter(#viewType),
        returnValue: _i3.ViewType.viewGrid,
      ) as _i3.ViewType);
  @override
  set viewType(_i3.ViewType? _viewType) => super.noSuchMethod(
        Invocation.setter(
          #viewType,
          _viewType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get publishedRecipesLength => (super.noSuchMethod(
        Invocation.getter(#publishedRecipesLength),
        returnValue: 0,
      ) as int);
  @override
  bool get publishCollapse => (super.noSuchMethod(
        Invocation.getter(#publishCollapse),
        returnValue: false,
      ) as bool);
  @override
  set publishCollapse(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #publishCollapse,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get draftCollapse => (super.noSuchMethod(
        Invocation.getter(#draftCollapse),
        returnValue: false,
      ) as bool);
  @override
  set draftCollapse(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #draftCollapse,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i4.NFT> get nftDraftList => (super.noSuchMethod(
        Invocation.getter(#nftDraftList),
        returnValue: <_i4.NFT>[],
      ) as List<_i4.NFT>);
  @override
  set nftDraftList(List<_i4.NFT>? nftDraftList) => super.noSuchMethod(
        Invocation.setter(
          #nftDraftList,
          nftDraftList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i4.NFT> get nftForSaleList => (super.noSuchMethod(
        Invocation.getter(#nftForSaleList),
        returnValue: <_i4.NFT>[],
      ) as List<_i4.NFT>);
  @override
  set nftForSaleList(List<_i4.NFT>? nftForSale) => super.noSuchMethod(
        Invocation.setter(
          #nftForSaleList,
          nftForSale,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i4.NFT> get nftPublishedList => (super.noSuchMethod(
        Invocation.getter(#nftPublishedList),
        returnValue: <_i4.NFT>[],
      ) as List<_i4.NFT>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void changeSelectedCollection(_i3.CollectionType? collectionType) =>
      super.noSuchMethod(
        Invocation.method(
          #changeSelectedCollection,
          [collectionType],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void getTotalForSale() => super.noSuchMethod(
        Invocation.method(
          #getTotalForSale,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> getPublishAndDraftData() => (super.noSuchMethod(
        Invocation.method(
          #getPublishAndDraftData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> getRecipesList() => (super.noSuchMethod(
        Invocation.method(
          #getRecipesList,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void addToRecentNFT(_i4.NFT? nft) => super.noSuchMethod(
        Invocation.method(
          #addToRecentNFT,
          [nft],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> getDraftsList() => (super.noSuchMethod(
        Invocation.method(
          #getDraftsList,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> refreshDraftsList() => (super.noSuchMethod(
        Invocation.method(
          #refreshDraftsList,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteNft(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNft,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void saveNFT({required _i4.NFT? nft}) => super.noSuchMethod(
        Invocation.method(
          #saveNFT,
          [],
          {#nft: nft},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateViewType(_i3.ViewType? selectedViewType) => super.noSuchMethod(
        Invocation.method(
          #updateViewType,
          [selectedViewType],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updatePublishedNFTList({required _i4.NFT? nft}) => super.noSuchMethod(
        Invocation.method(
          #updatePublishedNFTList,
          [],
          {#nft: nft},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void startPublishingFlowAgain(_i4.NFT? nft) => super.noSuchMethod(
        Invocation.method(
          #startPublishingFlowAgain,
          [nft],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openOwnerView(_i4.NFT? nft) => super.noSuchMethod(
        Invocation.method(
          #openOwnerView,
          [nft],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
