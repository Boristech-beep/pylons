// Mocks generated by Mockito 5.3.2 from annotations
// in easel_flutter/test/widget/save_as_draft_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i9;

import 'package:easel_flutter/models/nft.dart' as _i5;
import 'package:easel_flutter/models/nft_ownership_history.dart' as _i7;
import 'package:easel_flutter/repository/repository.dart' as _i2;
import 'package:easel_flutter/screens/owner_view/viewmodel/owner_view_viewmodel.dart'
    as _i6;
import 'package:easel_flutter/screens/owner_view/widgets/tab_fields.dart'
    as _i8;
import 'package:easel_flutter/services/third_party_services/audio_player_helper.dart'
    as _i3;
import 'package:easel_flutter/services/third_party_services/video_player_helper.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepository_0 extends _i1.SmartFake implements _i2.Repository {
  _FakeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioPlayerHelper_1 extends _i1.SmartFake
    implements _i3.AudioPlayerHelper {
  _FakeAudioPlayerHelper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVideoPlayerHelper_2 extends _i1.SmartFake
    implements _i4.VideoPlayerHelper {
  _FakeVideoPlayerHelper_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNFT_3 extends _i1.SmartFake implements _i5.NFT {
  _FakeNFT_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OwnerViewViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockOwnerViewViewModel extends _i1.Mock
    implements _i6.OwnerViewViewModel {
  MockOwnerViewViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i3.AudioPlayerHelper get audioPlayerHelper => (super.noSuchMethod(
        Invocation.getter(#audioPlayerHelper),
        returnValue: _FakeAudioPlayerHelper_1(
          this,
          Invocation.getter(#audioPlayerHelper),
        ),
      ) as _i3.AudioPlayerHelper);
  @override
  _i4.VideoPlayerHelper get videoPlayerHelper => (super.noSuchMethod(
        Invocation.getter(#videoPlayerHelper),
        returnValue: _FakeVideoPlayerHelper_2(
          this,
          Invocation.getter(#videoPlayerHelper),
        ),
      ) as _i4.VideoPlayerHelper);
  @override
  bool get likedByMe => (super.noSuchMethod(
        Invocation.getter(#likedByMe),
        returnValue: false,
      ) as bool);
  @override
  set likedByMe(bool? _likedByMe) => super.noSuchMethod(
        Invocation.setter(
          #likedByMe,
          _likedByMe,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get viewCount => (super.noSuchMethod(
        Invocation.getter(#viewCount),
        returnValue: 0,
      ) as int);
  @override
  set viewCount(int? _viewCount) => super.noSuchMethod(
        Invocation.setter(
          #viewCount,
          _viewCount,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get likesCount => (super.noSuchMethod(
        Invocation.getter(#likesCount),
        returnValue: 0,
      ) as int);
  @override
  set likesCount(int? _likesCount) => super.noSuchMethod(
        Invocation.setter(
          #likesCount,
          _likesCount,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<String> get hashtagList => (super.noSuchMethod(
        Invocation.getter(#hashtagList),
        returnValue: <String>[],
      ) as List<String>);
  @override
  set hashtagList(List<String>? _hashtagList) => super.noSuchMethod(
        Invocation.setter(
          #hashtagList,
          _hashtagList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i7.NftOwnershipHistory> get nftOwnershipHistoryList =>
      (super.noSuchMethod(
        Invocation.getter(#nftOwnershipHistoryList),
        returnValue: <_i7.NftOwnershipHistory>[],
      ) as List<_i7.NftOwnershipHistory>);
  @override
  set nftOwnershipHistoryList(
          List<_i7.NftOwnershipHistory>? _nftOwnershipHistoryList) =>
      super.noSuchMethod(
        Invocation.setter(
          #nftOwnershipHistoryList,
          _nftOwnershipHistoryList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set selectedField(_i8.TabFields? _selectedField) => super.noSuchMethod(
        Invocation.setter(
          #selectedField,
          _selectedField,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get owner => (super.noSuchMethod(
        Invocation.getter(#owner),
        returnValue: '',
      ) as String);
  @override
  set owner(String? _owner) => super.noSuchMethod(
        Invocation.setter(
          #owner,
          _owner,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isOwnershipExpanded => (super.noSuchMethod(
        Invocation.getter(#isOwnershipExpanded),
        returnValue: false,
      ) as bool);
  @override
  set isOwnershipExpanded(bool? _isOwnershipExpanded) => super.noSuchMethod(
        Invocation.setter(
          #isOwnershipExpanded,
          _isOwnershipExpanded,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isHistoryExpanded => (super.noSuchMethod(
        Invocation.getter(#isHistoryExpanded),
        returnValue: false,
      ) as bool);
  @override
  set isHistoryExpanded(bool? _isHistoryExpanded) => super.noSuchMethod(
        Invocation.setter(
          #isHistoryExpanded,
          _isHistoryExpanded,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isDetailsExpanded => (super.noSuchMethod(
        Invocation.getter(#isDetailsExpanded),
        returnValue: false,
      ) as bool);
  @override
  set isDetailsExpanded(bool? _isDetailsExpanded) => super.noSuchMethod(
        Invocation.setter(
          #isDetailsExpanded,
          _isDetailsExpanded,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.NFT get nft => (super.noSuchMethod(
        Invocation.getter(#nft),
        returnValue: _FakeNFT_3(
          this,
          Invocation.getter(#nft),
        ),
      ) as _i5.NFT);
  @override
  bool get isLiking => (super.noSuchMethod(
        Invocation.getter(#isLiking),
        returnValue: false,
      ) as bool);
  @override
  set isLiking(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLiking,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get collapsed => (super.noSuchMethod(
        Invocation.getter(#collapsed),
        returnValue: false,
      ) as bool);
  @override
  set collapsed(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #collapsed,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isViewingFullNft => (super.noSuchMethod(
        Invocation.getter(#isViewingFullNft),
        returnValue: false,
      ) as bool);
  @override
  set isViewingFullNft(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isViewingFullNft,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set nft(_i5.NFT? value) => super.noSuchMethod(
        Invocation.setter(
          #nft,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void toChangeCollapse() => super.noSuchMethod(
        Invocation.method(
          #toChangeCollapse,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void closeExpansion() => super.noSuchMethod(
        Invocation.method(
          #closeExpansion,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChangeTab(_i8.TabFields? tab) => super.noSuchMethod(
        Invocation.method(
          #onChangeTab,
          [tab],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isExpansionOpen() => (super.noSuchMethod(
        Invocation.method(
          #isExpansionOpen,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void getWhichTabIsExpanded() => super.noSuchMethod(
        Invocation.method(
          #getWhichTabIsExpanded,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
