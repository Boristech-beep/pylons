// Mocks generated by Mockito 5.3.2 from annotations
// in easel_flutter/test/widget/save_as_draft_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i6;

import 'package:easel_flutter/models/nft.dart' as _i5;
import 'package:easel_flutter/repository/repository.dart' as _i2;
import 'package:easel_flutter/viewmodels/home_viewmodel.dart' as _i4;
import 'package:flutter/cupertino.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepository_0 extends _i1.SmartFake implements _i2.Repository {
  _FakeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePageController_2 extends _i1.SmartFake
    implements _i3.PageController {
  _FakePageController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i4.HomeViewModel {
  MockHomeViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i3.ValueNotifier<int> get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: _FakeValueNotifier_1<int>(
          this,
          Invocation.getter(#currentPage),
        ),
      ) as _i3.ValueNotifier<int>);
  @override
  set currentPage(_i3.ValueNotifier<int>? _currentPage) => super.noSuchMethod(
        Invocation.setter(
          #currentPage,
          _currentPage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ValueNotifier<int> get currentStep => (super.noSuchMethod(
        Invocation.getter(#currentStep),
        returnValue: _FakeValueNotifier_1<int>(
          this,
          Invocation.getter(#currentStep),
        ),
      ) as _i3.ValueNotifier<int>);
  @override
  set currentStep(_i3.ValueNotifier<int>? _currentStep) => super.noSuchMethod(
        Invocation.setter(
          #currentStep,
          _currentStep,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.PageController get pageController => (super.noSuchMethod(
        Invocation.getter(#pageController),
        returnValue: _FakePageController_2(
          this,
          Invocation.getter(#pageController),
        ),
      ) as _i3.PageController);
  @override
  set pageController(_i3.PageController? _pageController) => super.noSuchMethod(
        Invocation.setter(
          #pageController,
          _pageController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set nft(_i5.NFT? _nft) => super.noSuchMethod(
        Invocation.setter(
          #nft,
          _nft,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set from(String? _from) => super.noSuchMethod(
        Invocation.setter(
          #from,
          _from,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<String> get pageTitles => (super.noSuchMethod(
        Invocation.getter(#pageTitles),
        returnValue: <String>[],
      ) as List<String>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void init({required _i6.VoidCallback? setTextField}) => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
          {#setTextField: setTextField},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> nextPage() => (super.noSuchMethod(
        Invocation.method(
          #nextPage,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> previousPage() => (super.noSuchMethod(
        Invocation.method(
          #previousPage,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void disposeControllers() => super.noSuchMethod(
        Invocation.method(
          #disposeControllers,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
