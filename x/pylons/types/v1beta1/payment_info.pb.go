// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/pylons/v1beta1/payment_info.proto

package v1beta1

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PaymentInfo struct {
	PurchaseId    string                                 `protobuf:"bytes,1,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty"`
	ProcessorName string                                 `protobuf:"bytes,2,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	PayerAddr     string                                 `protobuf:"bytes,3,opt,name=payer_addr,json=payerAddr,proto3" json:"payer_addr,omitempty"`
	Amount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	ProductId     string                                 `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Signature     string                                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PaymentInfo) Reset()         { *m = PaymentInfo{} }
func (m *PaymentInfo) String() string { return proto.CompactTextString(m) }
func (*PaymentInfo) ProtoMessage()    {}
func (*PaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_85686a9d93a2c57f, []int{0}
}
func (m *PaymentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentInfo.Merge(m, src)
}
func (m *PaymentInfo) XXX_Size() int {
	return m.Size()
}
func (m *PaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentInfo proto.InternalMessageInfo

func (m *PaymentInfo) GetPurchaseId() string {
	if m != nil {
		return m.PurchaseId
	}
	return ""
}

func (m *PaymentInfo) GetProcessorName() string {
	if m != nil {
		return m.ProcessorName
	}
	return ""
}

func (m *PaymentInfo) GetPayerAddr() string {
	if m != nil {
		return m.PayerAddr
	}
	return ""
}

func (m *PaymentInfo) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *PaymentInfo) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*PaymentInfo)(nil), "pylons.pylons.v1beta1.PaymentInfo")
}

func init() {
	proto.RegisterFile("pylons/pylons/v1beta1/payment_info.proto", fileDescriptor_85686a9d93a2c57f)
}

var fileDescriptor_85686a9d93a2c57f = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0xdb, 0xff, 0x5f, 0x07, 0xcb, 0xd0, 0x43, 0x51, 0x28, 0xa2, 0x99, 0x08, 0xca, 0x2e,
	0x6b, 0x19, 0xfa, 0x05, 0xdc, 0x41, 0xe8, 0x65, 0x8c, 0x1d, 0xbd, 0x94, 0x2c, 0xc9, 0xba, 0xa2,
	0xc9, 0x1b, 0x92, 0x54, 0xec, 0xb7, 0xf0, 0x63, 0xed, 0xb8, 0xa3, 0x78, 0x18, 0xb2, 0x7d, 0x0a,
	0x6f, 0xb2, 0x34, 0x1d, 0x9e, 0x9e, 0x97, 0xe7, 0xfd, 0xb5, 0xef, 0xc3, 0x13, 0x34, 0x50, 0xf5,
	0x2b, 0x48, 0x93, 0x7a, 0x79, 0x1b, 0xcd, 0xb9, 0x25, 0xa3, 0x54, 0x91, 0x5a, 0x70, 0x69, 0xf3,
	0x52, 0x2e, 0x20, 0x51, 0x1a, 0x2c, 0x44, 0xe7, 0x0d, 0x92, 0x78, 0xf1, 0xe4, 0xc5, 0x59, 0x01,
	0x05, 0x38, 0x22, 0xdd, 0x4f, 0x0d, 0x7c, 0xf3, 0x13, 0xa2, 0xde, 0xb4, 0xf9, 0x47, 0x26, 0x17,
	0x10, 0xf5, 0x51, 0x4f, 0x55, 0x9a, 0x2e, 0x89, 0xe1, 0x79, 0xc9, 0xe2, 0xf0, 0x3a, 0x1c, 0x74,
	0x67, 0xa8, 0xb5, 0x32, 0x16, 0xdd, 0xa2, 0x53, 0xa5, 0x81, 0x72, 0x63, 0x40, 0xe7, 0x92, 0x08,
	0x1e, 0xff, 0x73, 0xcc, 0xc9, 0xc1, 0x9d, 0x10, 0xc1, 0xa3, 0x2b, 0x84, 0x14, 0xa9, 0xb9, 0xce,
	0x09, 0x63, 0x3a, 0xfe, 0xef, 0x90, 0xae, 0x73, 0x1e, 0x19, 0xd3, 0xd1, 0x13, 0xea, 0x10, 0x01,
	0x95, 0xb4, 0xf1, 0xd1, 0x7e, 0x35, 0x4e, 0x56, 0x9b, 0x7e, 0xf0, 0xb5, 0xe9, 0xdf, 0x15, 0xa5,
	0x5d, 0x56, 0xf3, 0x84, 0x82, 0x48, 0x29, 0x18, 0x01, 0xc6, 0xcb, 0xd0, 0xb0, 0x97, 0xd4, 0xd6,
	0x8a, 0x9b, 0x24, 0x93, 0x76, 0xe6, 0xbf, 0x76, 0x67, 0x34, 0xb0, 0x8a, 0xda, 0x7d, 0xda, 0x63,
	0x7f, 0xa6, 0x71, 0x32, 0x16, 0x5d, 0xa2, 0xae, 0x29, 0x0b, 0x49, 0x6c, 0xa5, 0x79, 0xdc, 0x69,
	0xb6, 0x07, 0x63, 0x3c, 0x59, 0x6d, 0x71, 0xb8, 0xde, 0xe2, 0xf0, 0x7b, 0x8b, 0xc3, 0x8f, 0x1d,
	0x0e, 0xd6, 0x3b, 0x1c, 0x7c, 0xee, 0x70, 0xf0, 0xfc, 0xf0, 0x27, 0xc6, 0xd4, 0xd5, 0x38, 0xb4,
	0x9c, 0x2e, 0xdb, 0xf2, 0xdf, 0xdb, 0xc1, 0x05, 0x6a, 0xdf, 0x62, 0xde, 0x71, 0x95, 0xde, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x94, 0x2d, 0x38, 0xab, 0x01, 0x00, 0x00,
}

func (m *PaymentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPaymentInfo(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProductId) > 0 {
		i -= len(m.ProductId)
		copy(dAtA[i:], m.ProductId)
		i = encodeVarintPaymentInfo(dAtA, i, uint64(len(m.ProductId)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPaymentInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.PayerAddr) > 0 {
		i -= len(m.PayerAddr)
		copy(dAtA[i:], m.PayerAddr)
		i = encodeVarintPaymentInfo(dAtA, i, uint64(len(m.PayerAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProcessorName) > 0 {
		i -= len(m.ProcessorName)
		copy(dAtA[i:], m.ProcessorName)
		i = encodeVarintPaymentInfo(dAtA, i, uint64(len(m.ProcessorName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PurchaseId) > 0 {
		i -= len(m.PurchaseId)
		copy(dAtA[i:], m.PurchaseId)
		i = encodeVarintPaymentInfo(dAtA, i, uint64(len(m.PurchaseId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPaymentInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovPaymentInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PaymentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PurchaseId)
	if l > 0 {
		n += 1 + l + sovPaymentInfo(uint64(l))
	}
	l = len(m.ProcessorName)
	if l > 0 {
		n += 1 + l + sovPaymentInfo(uint64(l))
	}
	l = len(m.PayerAddr)
	if l > 0 {
		n += 1 + l + sovPaymentInfo(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPaymentInfo(uint64(l))
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovPaymentInfo(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentInfo(uint64(l))
	}
	return n
}

func sovPaymentInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPaymentInfo(x uint64) (n int) {
	return sovPaymentInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaymentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaymentInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaymentInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPaymentInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPaymentInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPaymentInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPaymentInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaymentInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPaymentInfo = fmt.Errorf("proto: unexpected end of group")
)
