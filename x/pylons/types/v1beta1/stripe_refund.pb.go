// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/pylons/v1beta1/stripe_refund.proto

package v1beta1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StripeRefund struct {
	Payment *PaymentInfo `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	Settled bool         `protobuf:"varint,2,opt,name=settled,proto3" json:"settled,omitempty"`
}

func (m *StripeRefund) Reset()         { *m = StripeRefund{} }
func (m *StripeRefund) String() string { return proto.CompactTextString(m) }
func (*StripeRefund) ProtoMessage()    {}
func (*StripeRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e85a52e76a18d06, []int{0}
}
func (m *StripeRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StripeRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StripeRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StripeRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StripeRefund.Merge(m, src)
}
func (m *StripeRefund) XXX_Size() int {
	return m.Size()
}
func (m *StripeRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_StripeRefund.DiscardUnknown(m)
}

var xxx_messageInfo_StripeRefund proto.InternalMessageInfo

func (m *StripeRefund) GetPayment() *PaymentInfo {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *StripeRefund) GetSettled() bool {
	if m != nil {
		return m.Settled
	}
	return false
}

func init() {
	proto.RegisterType((*StripeRefund)(nil), "pylons.pylons.v1beta1.StripeRefund")
}

func init() {
	proto.RegisterFile("pylons/pylons/v1beta1/stripe_refund.proto", fileDescriptor_3e85a52e76a18d06)
}

var fileDescriptor_3e85a52e76a18d06 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0xa8, 0xcc, 0xc9,
	0xcf, 0x2b, 0xd6, 0x87, 0x52, 0x65, 0x86, 0x49, 0xa9, 0x25, 0x89, 0x86, 0xfa, 0xc5, 0x25, 0x45,
	0x99, 0x05, 0xa9, 0xf1, 0x45, 0xa9, 0x69, 0xa5, 0x79, 0x29, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9,
	0x42, 0xa2, 0x10, 0x35, 0x7a, 0x50, 0x0a, 0xaa, 0x54, 0x4a, 0x03, 0xbb, 0x09, 0x05, 0x89, 0x95,
	0xb9, 0xa9, 0x79, 0x25, 0xf1, 0x99, 0x79, 0x69, 0xf9, 0x10, 0x03, 0x94, 0xd2, 0xb8, 0x78, 0x82,
	0xc1, 0xe6, 0x06, 0x81, 0x8d, 0x15, 0xb2, 0xe1, 0x62, 0x87, 0xaa, 0x92, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x36, 0x52, 0xd2, 0xc3, 0x6a, 0x85, 0x5e, 0x00, 0x44, 0x95, 0x67, 0x5e, 0x5a, 0x7e, 0x10,
	0x4c, 0x8b, 0x90, 0x04, 0x17, 0x7b, 0x71, 0x6a, 0x49, 0x49, 0x4e, 0x6a, 0x8a, 0x04, 0x93, 0x02,
	0xa3, 0x06, 0x47, 0x10, 0x8c, 0xeb, 0xe4, 0x77, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0x26, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x01, 0x60,
	0x3b, 0x74, 0x4b, 0x52, 0x93, 0x33, 0x60, 0x6e, 0xaf, 0x80, 0x31, 0x4a, 0x2a, 0x0b, 0x52, 0xe1,
	0x5e, 0x49, 0x62, 0x03, 0x3b, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x84, 0xe7, 0xac, 0xbd,
	0x2c, 0x01, 0x00, 0x00,
}

func (m *StripeRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StripeRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StripeRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settled {
		i--
		if m.Settled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStripeRefund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStripeRefund(dAtA []byte, offset int, v uint64) int {
	offset -= sovStripeRefund(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StripeRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovStripeRefund(uint64(l))
	}
	if m.Settled {
		n += 2
	}
	return n
}

func sovStripeRefund(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStripeRefund(x uint64) (n int) {
	return sovStripeRefund(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StripeRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStripeRefund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StripeRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StripeRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStripeRefund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStripeRefund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStripeRefund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &PaymentInfo{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStripeRefund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Settled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStripeRefund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStripeRefund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStripeRefund(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStripeRefund
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStripeRefund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStripeRefund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStripeRefund
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStripeRefund
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStripeRefund
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStripeRefund        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStripeRefund          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStripeRefund = fmt.Errorf("proto: unexpected end of group")
)
