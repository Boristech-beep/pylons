// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/pylons/v1/params.proto

package v1

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GoogleInAppPurchasePackage struct {
	PackageName string                                 `protobuf:"bytes,1,opt,name=packageName,proto3" json:"packageName,omitempty" yaml:"package_name"`
	ProductID   string                                 `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty" yaml:"product_id"`
	Amount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *GoogleInAppPurchasePackage) Reset()         { *m = GoogleInAppPurchasePackage{} }
func (m *GoogleInAppPurchasePackage) String() string { return proto.CompactTextString(m) }
func (*GoogleInAppPurchasePackage) ProtoMessage()    {}
func (*GoogleInAppPurchasePackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f8567cecb032a, []int{0}
}
func (m *GoogleInAppPurchasePackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoogleInAppPurchasePackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoogleInAppPurchasePackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoogleInAppPurchasePackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleInAppPurchasePackage.Merge(m, src)
}
func (m *GoogleInAppPurchasePackage) XXX_Size() int {
	return m.Size()
}
func (m *GoogleInAppPurchasePackage) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleInAppPurchasePackage.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleInAppPurchasePackage proto.InternalMessageInfo

func (m *GoogleInAppPurchasePackage) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *GoogleInAppPurchasePackage) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

// CoinIssuer represents an entity or external blockchain
type CoinIssuer struct {
	CoinDenom                 string                       `protobuf:"bytes,1,opt,name=coinDenom,proto3" json:"coinDenom,omitempty" yaml:"coin_denom"`
	Packages                  []GoogleInAppPurchasePackage `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages" yaml:"google_iap_packages"`
	GoogleInAppPurchasePubKey string                       `protobuf:"bytes,3,opt,name=googleInAppPurchasePubKey,proto3" json:"googleInAppPurchasePubKey,omitempty" yaml:"google_iap_pubkey"`
	EntityName                string                       `protobuf:"bytes,4,opt,name=entityName,proto3" json:"entityName,omitempty"`
}

func (m *CoinIssuer) Reset()         { *m = CoinIssuer{} }
func (m *CoinIssuer) String() string { return proto.CompactTextString(m) }
func (*CoinIssuer) ProtoMessage()    {}
func (*CoinIssuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f8567cecb032a, []int{1}
}
func (m *CoinIssuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinIssuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinIssuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinIssuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinIssuer.Merge(m, src)
}
func (m *CoinIssuer) XXX_Size() int {
	return m.Size()
}
func (m *CoinIssuer) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinIssuer.DiscardUnknown(m)
}

var xxx_messageInfo_CoinIssuer proto.InternalMessageInfo

func (m *CoinIssuer) GetCoinDenom() string {
	if m != nil {
		return m.CoinDenom
	}
	return ""
}

func (m *CoinIssuer) GetPackages() []GoogleInAppPurchasePackage {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *CoinIssuer) GetGoogleInAppPurchasePubKey() string {
	if m != nil {
		return m.GoogleInAppPurchasePubKey
	}
	return ""
}

func (m *CoinIssuer) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

type PaymentProcessor struct {
	CoinDenom string `protobuf:"bytes,1,opt,name=CoinDenom,proto3" json:"CoinDenom,omitempty" yaml:"coin_denom"`
	// pubKey is assumed to be ed25519
	PubKey string `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty" yaml:"pub_key"`
	// Represents the percentage retained by the payment processor when new coins are minted. In the range [0, 1), this amount is burned on-chain, actual fee is retained at the source.
	ProcessorPercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=processorPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"processorPercentage" yaml:"processor_percentage"`
	// Represents the percentage distributed to stakers. In the range [0, 1). The sum with processingCut cannot exceed 1.
	ValidatorsPercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=validatorsPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validatorsPercentage" yaml:"validators_pecentage"`
	Name                 string                                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *PaymentProcessor) Reset()         { *m = PaymentProcessor{} }
func (m *PaymentProcessor) String() string { return proto.CompactTextString(m) }
func (*PaymentProcessor) ProtoMessage()    {}
func (*PaymentProcessor) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f8567cecb032a, []int{2}
}
func (m *PaymentProcessor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentProcessor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentProcessor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentProcessor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentProcessor.Merge(m, src)
}
func (m *PaymentProcessor) XXX_Size() int {
	return m.Size()
}
func (m *PaymentProcessor) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentProcessor.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentProcessor proto.InternalMessageInfo

func (m *PaymentProcessor) GetCoinDenom() string {
	if m != nil {
		return m.CoinDenom
	}
	return ""
}

func (m *PaymentProcessor) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *PaymentProcessor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Params represent the parameters used by the pylons module
type Params struct {
	CoinIssuers               []CoinIssuer                           `protobuf:"bytes,1,rep,name=coinIssuers,proto3" json:"coinIssuers" yaml:"coin_issuers"`
	PaymentProcessors         []PaymentProcessor                     `protobuf:"bytes,2,rep,name=paymentProcessors,proto3" json:"paymentProcessors" yaml:"payment_processors"`
	RecipeFeePercentage       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=recipeFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"recipeFeePercentage" yaml:"recipe_fee_percentage"`
	ItemTransferFeePercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=itemTransferFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"itemTransferFeePercentage" yaml:"item_transfer_fee_percentage"`
	UpdateItemStringFee       types.Coin                             `protobuf:"bytes,5,opt,name=updateItemStringFee,proto3" json:"updateItemStringFee" yaml:"update_item_string_fee"`
	MinTransferFee            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=minTransferFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minTransferFee" yaml:"min_transfer_fee"`
	MaxTransferFee            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=maxTransferFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"maxTransferFee" yaml:"max_transfer_fee"`
	UpdateUsernameFee         types.Coin                             `protobuf:"bytes,8,opt,name=updateUsernameFee,proto3" json:"updateUsernameFee" yaml:"update_username_fee"`
	DistrEpochIdentifier      string                                 `protobuf:"bytes,9,opt,name=distrEpochIdentifier,proto3" json:"distrEpochIdentifier,omitempty" yaml:"distr_epoch_identifier"`
	EngineVersion             uint64                                 `protobuf:"varint,10,opt,name=engineVersion,proto3" json:"engineVersion,omitempty" yaml:"engine_version"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f8567cecb032a, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCoinIssuers() []CoinIssuer {
	if m != nil {
		return m.CoinIssuers
	}
	return nil
}

func (m *Params) GetPaymentProcessors() []PaymentProcessor {
	if m != nil {
		return m.PaymentProcessors
	}
	return nil
}

func (m *Params) GetUpdateItemStringFee() types.Coin {
	if m != nil {
		return m.UpdateItemStringFee
	}
	return types.Coin{}
}

func (m *Params) GetUpdateUsernameFee() types.Coin {
	if m != nil {
		return m.UpdateUsernameFee
	}
	return types.Coin{}
}

func (m *Params) GetDistrEpochIdentifier() string {
	if m != nil {
		return m.DistrEpochIdentifier
	}
	return ""
}

func (m *Params) GetEngineVersion() uint64 {
	if m != nil {
		return m.EngineVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*GoogleInAppPurchasePackage)(nil), "pylons.pylons.v1.GoogleInAppPurchasePackage")
	proto.RegisterType((*CoinIssuer)(nil), "pylons.pylons.v1.CoinIssuer")
	proto.RegisterType((*PaymentProcessor)(nil), "pylons.pylons.v1.PaymentProcessor")
	proto.RegisterType((*Params)(nil), "pylons.pylons.v1.Params")
}

func init() { proto.RegisterFile("pylons/pylons/v1/params.proto", fileDescriptor_505f8567cecb032a) }

var fileDescriptor_505f8567cecb032a = []byte{
	// 908 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x26, 0xc6, 0x24, 0x13, 0xb5, 0x6a, 0xc6, 0xa9, 0xba, 0x4e, 0x53, 0x6f, 0x3a, 0x08,
	0x14, 0x21, 0x6a, 0x2b, 0xed, 0x89, 0x5e, 0x2a, 0xdc, 0x50, 0x64, 0xa1, 0x56, 0xd6, 0x42, 0x40,
	0x2a, 0x87, 0xd5, 0x78, 0xfd, 0xb2, 0x19, 0xc5, 0x3b, 0xb3, 0xec, 0xcc, 0x5a, 0xf1, 0x09, 0xb8,
	0x73, 0x40, 0xe2, 0xc2, 0x91, 0x23, 0x12, 0xff, 0x48, 0x8f, 0x3d, 0x56, 0x1c, 0x56, 0x28, 0x11,
	0xff, 0x80, 0xff, 0x02, 0xb4, 0x33, 0xe3, 0xdf, 0x8e, 0x20, 0xca, 0x69, 0x47, 0xfb, 0xde, 0x7c,
	0xdf, 0xf7, 0xde, 0xfb, 0x66, 0x34, 0xe8, 0x41, 0x32, 0xec, 0x0b, 0x2e, 0x9b, 0xf6, 0x33, 0x38,
	0x6c, 0x26, 0x34, 0xa5, 0xb1, 0x6c, 0x24, 0xa9, 0x50, 0x02, 0xdf, 0x31, 0xff, 0x1b, 0xf6, 0x33,
	0x38, 0xdc, 0xdd, 0x89, 0x44, 0x24, 0x74, 0xb0, 0x59, 0xac, 0x4c, 0xde, 0x6e, 0x3d, 0x14, 0x32,
	0x16, 0xb2, 0xd9, 0xa5, 0x12, 0x9a, 0x83, 0xc3, 0x2e, 0x28, 0x7a, 0xd8, 0x0c, 0x05, 0xe3, 0x26,
	0x4e, 0xfe, 0x71, 0xd0, 0xee, 0x17, 0x42, 0x44, 0x7d, 0x68, 0xf3, 0xcf, 0x92, 0xa4, 0x93, 0xa5,
	0xe1, 0x29, 0x95, 0xd0, 0xa1, 0xe1, 0x19, 0x8d, 0x00, 0x7f, 0x8a, 0xb6, 0x12, 0xb3, 0x7c, 0x45,
	0x63, 0x70, 0x9d, 0x7d, 0xe7, 0x60, 0xb3, 0x75, 0x6f, 0x94, 0x7b, 0xd5, 0x21, 0x8d, 0xfb, 0x4f,
	0x89, 0x0d, 0x06, 0x9c, 0xc6, 0x40, 0xfc, 0xd9, 0x5c, 0xfc, 0x04, 0x6d, 0x26, 0xa9, 0xe8, 0x65,
	0xa1, 0x6a, 0x1f, 0xb9, 0x6b, 0x7a, 0xe3, 0xdd, 0x51, 0xee, 0x6d, 0xdb, 0x8d, 0x26, 0x14, 0xb0,
	0x1e, 0xf1, 0xa7, 0x79, 0xf8, 0x5b, 0x54, 0xa1, 0xb1, 0xc8, 0xb8, 0x72, 0xd7, 0xf5, 0x8e, 0x67,
	0x6f, 0x72, 0xaf, 0xf4, 0x57, 0xee, 0x7d, 0x14, 0x31, 0x75, 0x9a, 0x75, 0x1b, 0xa1, 0x88, 0x9b,
	0xb6, 0x22, 0xf3, 0x79, 0x24, 0x7b, 0x67, 0x4d, 0x35, 0x4c, 0x40, 0x36, 0xda, 0x5c, 0x8d, 0x72,
	0xef, 0x96, 0xc1, 0x37, 0x28, 0xc4, 0xb7, 0x70, 0xe4, 0xcf, 0x35, 0x84, 0x9e, 0x0b, 0xc6, 0xdb,
	0x52, 0x66, 0x90, 0x16, 0xe2, 0x8a, 0x26, 0x1c, 0x01, 0x17, 0xb1, 0xad, 0x6a, 0x46, 0x5c, 0x11,
	0x0a, 0x7a, 0x45, 0x8c, 0xf8, 0xd3, 0x3c, 0xdc, 0x47, 0x1b, 0xb6, 0x40, 0xe9, 0xae, 0xed, 0xaf,
	0x1f, 0x6c, 0x3d, 0xfe, 0xa4, 0xb1, 0x38, 0x86, 0xc6, 0xd5, 0xcd, 0x6c, 0x91, 0xa2, 0x98, 0x51,
	0xee, 0xed, 0x1a, 0x96, 0x48, 0x67, 0x06, 0x8c, 0x26, 0xc1, 0x18, 0x96, 0xf8, 0x13, 0x06, 0xfc,
	0x1a, 0xd5, 0xa2, 0x15, 0x58, 0x59, 0xf7, 0x4b, 0x18, 0xda, 0xee, 0xec, 0x8d, 0x72, 0xcf, 0x5d,
	0x06, 0xcb, 0xba, 0x67, 0x30, 0x24, 0xfe, 0xd5, 0xdb, 0x71, 0x1d, 0x21, 0xe0, 0x8a, 0xa9, 0xa1,
	0x9e, 0x6a, 0xb9, 0x00, 0xf3, 0x67, 0xfe, 0x90, 0x9f, 0xd7, 0xd1, 0x9d, 0x0e, 0x1d, 0xc6, 0xc0,
	0x55, 0x27, 0x15, 0x21, 0x48, 0x29, 0x74, 0xcf, 0x9e, 0xff, 0xcf, 0x9e, 0x4d, 0xf2, 0xf0, 0xc7,
	0xa8, 0x92, 0x18, 0xc9, 0xc6, 0x02, 0x78, 0x94, 0x7b, 0xb7, 0xad, 0x05, 0xb2, 0x6e, 0xa0, 0x85,
	0xda, 0x0c, 0xfc, 0x03, 0xaa, 0x26, 0x63, 0xb6, 0x0e, 0xa4, 0x21, 0x70, 0x45, 0x23, 0xb0, 0xb5,
	0xbe, 0xbc, 0x86, 0x13, 0x8e, 0x20, 0x1c, 0xe5, 0xde, 0xfd, 0x89, 0xd3, 0x0c, 0x64, 0x90, 0x4c,
	0x30, 0x89, 0xbf, 0x8a, 0x09, 0xff, 0xe4, 0xa0, 0x9d, 0x01, 0xed, 0xb3, 0x1e, 0x55, 0x22, 0x95,
	0x33, 0x12, 0xca, 0x37, 0x93, 0x30, 0xc5, 0x0c, 0x12, 0x98, 0x48, 0x58, 0x49, 0x85, 0x31, 0x2a,
	0x17, 0x87, 0xc9, 0x7d, 0x4f, 0x0f, 0x45, 0xaf, 0xc9, 0xbb, 0x0d, 0x54, 0xe9, 0xe8, 0xd3, 0x8f,
	0xbf, 0x43, 0x5b, 0xe1, 0xc4, 0xc6, 0xd2, 0x75, 0xb4, 0x0d, 0xf7, 0x96, 0x6d, 0x38, 0xf5, 0x7a,
	0xeb, 0xbe, 0xb5, 0x5d, 0x75, 0x66, 0x50, 0xcc, 0xec, 0x27, 0xfe, 0x2c, 0x1a, 0x96, 0x68, 0x3b,
	0x59, 0x98, 0xfa, 0xd8, 0xe9, 0x64, 0x99, 0x62, 0xd1, 0x20, 0xad, 0x87, 0x96, 0xa8, 0x36, 0xbe,
	0x1b, 0x74, 0x3c, 0x98, 0x74, 0x5a, 0x12, 0x7f, 0x19, 0x1f, 0xff, 0xe8, 0xa0, 0x6a, 0x0a, 0x21,
	0x4b, 0xe0, 0x05, 0xc0, 0xd2, 0xd8, 0x5f, 0x5d, 0xbb, 0xe7, 0x7b, 0x86, 0xdd, 0x40, 0x06, 0x27,
	0x00, 0xf3, 0x73, 0x5f, 0x41, 0x85, 0x7f, 0x75, 0x50, 0x8d, 0x29, 0x88, 0xbf, 0x4e, 0x29, 0x97,
	0x27, 0x90, 0xce, 0x0b, 0x31, 0xc3, 0x3f, 0xbe, 0xb6, 0x90, 0x0f, 0x8c, 0x90, 0x02, 0x38, 0x50,
	0x16, 0x79, 0x49, 0xcf, 0xd5, 0xbc, 0x38, 0x45, 0xd5, 0x2c, 0xe9, 0x51, 0x05, 0x6d, 0x05, 0xf1,
	0x57, 0x2a, 0x65, 0x3c, 0x7a, 0x01, 0xc6, 0x18, 0x5b, 0x8f, 0x6b, 0x0d, 0xc3, 0xda, 0x28, 0x2e,
	0xf6, 0x86, 0xbd, 0xd8, 0xf5, 0xd4, 0x5b, 0x1f, 0xda, 0x31, 0x3c, 0x30, 0xfc, 0x06, 0x23, 0xd0,
	0x32, 0xa4, 0x46, 0x29, 0x44, 0x10, 0x7f, 0x15, 0x38, 0xfe, 0x1e, 0xdd, 0x8e, 0x19, 0x9f, 0xd1,
	0xe3, 0x56, 0x74, 0xf5, 0xed, 0x6b, 0xdf, 0xc3, 0xf7, 0x0c, 0x7b, 0xcc, 0xf8, 0x5c, 0xf1, 0xc4,
	0x5f, 0x20, 0xd0, 0x94, 0xf4, 0x7c, 0x96, 0xf2, 0xfd, 0x1b, 0x52, 0xd2, 0xf3, 0x25, 0xca, 0x39,
	0x02, 0x7c, 0x86, 0xb6, 0x4d, 0xf1, 0xc7, 0x12, 0xd2, 0xe2, 0x84, 0x15, 0xac, 0x1b, 0xff, 0xd5,
	0xd7, 0x85, 0xeb, 0xdb, 0xf6, 0x35, 0xb3, 0x10, 0x86, 0x69, 0x19, 0x17, 0x1f, 0xa3, 0x9d, 0x1e,
	0x93, 0x2a, 0xfd, 0x3c, 0x11, 0xe1, 0x69, 0xbb, 0x57, 0xdc, 0xb2, 0x27, 0x0c, 0x52, 0x77, 0x53,
	0x57, 0xf9, 0x70, 0x3a, 0x28, 0x9d, 0x15, 0x40, 0x91, 0x16, 0xb0, 0x49, 0x1e, 0xf1, 0x57, 0x6e,
	0xc7, 0xcf, 0xd0, 0x2d, 0xe0, 0x11, 0xe3, 0xf0, 0x0d, 0xa4, 0x92, 0x09, 0xee, 0xa2, 0x7d, 0xe7,
	0xa0, 0xdc, 0xaa, 0x8d, 0x72, 0xef, 0xae, 0xc1, 0x33, 0xe1, 0x60, 0x60, 0xe2, 0xc4, 0x9f, 0xcf,
	0x7f, 0x5a, 0xfe, 0xed, 0x77, 0xaf, 0xd4, 0x7a, 0xf9, 0xc7, 0x45, 0xdd, 0x79, 0x73, 0x51, 0x77,
	0xde, 0x5e, 0xd4, 0x9d, 0xbf, 0x2f, 0xea, 0xce, 0x2f, 0x97, 0xf5, 0xd2, 0xdb, 0xcb, 0x7a, 0xe9,
	0xdd, 0x65, 0xbd, 0xf4, 0xba, 0x39, 0xd3, 0xfb, 0x8e, 0x3e, 0xf8, 0x8f, 0x14, 0x84, 0xa7, 0xe3,
	0x47, 0xc9, 0xf9, 0x78, 0xa1, 0xa7, 0x50, 0x3c, 0x2f, 0x2a, 0xfa, 0x55, 0xf1, 0xe4, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf6, 0xb4, 0x78, 0xc4, 0xbe, 0x08, 0x00, 0x00,
}

func (this *GoogleInAppPurchasePackage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoogleInAppPurchasePackage)
	if !ok {
		that2, ok := that.(GoogleInAppPurchasePackage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PackageName != that1.PackageName {
		return false
	}
	if this.ProductID != that1.ProductID {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *CoinIssuer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinIssuer)
	if !ok {
		that2, ok := that.(CoinIssuer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoinDenom != that1.CoinDenom {
		return false
	}
	if len(this.Packages) != len(that1.Packages) {
		return false
	}
	for i := range this.Packages {
		if !this.Packages[i].Equal(&that1.Packages[i]) {
			return false
		}
	}
	if this.GoogleInAppPurchasePubKey != that1.GoogleInAppPurchasePubKey {
		return false
	}
	if this.EntityName != that1.EntityName {
		return false
	}
	return true
}
func (this *PaymentProcessor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaymentProcessor)
	if !ok {
		that2, ok := that.(PaymentProcessor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoinDenom != that1.CoinDenom {
		return false
	}
	if this.PubKey != that1.PubKey {
		return false
	}
	if !this.ProcessorPercentage.Equal(that1.ProcessorPercentage) {
		return false
	}
	if !this.ValidatorsPercentage.Equal(that1.ValidatorsPercentage) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CoinIssuers) != len(that1.CoinIssuers) {
		return false
	}
	for i := range this.CoinIssuers {
		if !this.CoinIssuers[i].Equal(&that1.CoinIssuers[i]) {
			return false
		}
	}
	if len(this.PaymentProcessors) != len(that1.PaymentProcessors) {
		return false
	}
	for i := range this.PaymentProcessors {
		if !this.PaymentProcessors[i].Equal(&that1.PaymentProcessors[i]) {
			return false
		}
	}
	if !this.RecipeFeePercentage.Equal(that1.RecipeFeePercentage) {
		return false
	}
	if !this.ItemTransferFeePercentage.Equal(that1.ItemTransferFeePercentage) {
		return false
	}
	if !this.UpdateItemStringFee.Equal(&that1.UpdateItemStringFee) {
		return false
	}
	if !this.MinTransferFee.Equal(that1.MinTransferFee) {
		return false
	}
	if !this.MaxTransferFee.Equal(that1.MaxTransferFee) {
		return false
	}
	if !this.UpdateUsernameFee.Equal(&that1.UpdateUsernameFee) {
		return false
	}
	if this.DistrEpochIdentifier != that1.DistrEpochIdentifier {
		return false
	}
	if this.EngineVersion != that1.EngineVersion {
		return false
	}
	return true
}
func (m *GoogleInAppPurchasePackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleInAppPurchasePackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoogleInAppPurchasePackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ProductID) > 0 {
		i -= len(m.ProductID)
		copy(dAtA[i:], m.ProductID)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProductID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PackageName) > 0 {
		i -= len(m.PackageName)
		copy(dAtA[i:], m.PackageName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PackageName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinIssuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinIssuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinIssuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntityName) > 0 {
		i -= len(m.EntityName)
		copy(dAtA[i:], m.EntityName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EntityName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GoogleInAppPurchasePubKey) > 0 {
		i -= len(m.GoogleInAppPurchasePubKey)
		copy(dAtA[i:], m.GoogleInAppPurchasePubKey)
		i = encodeVarintParams(dAtA, i, uint64(len(m.GoogleInAppPurchasePubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Packages) > 0 {
		for iNdEx := len(m.Packages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CoinDenom) > 0 {
		i -= len(m.CoinDenom)
		copy(dAtA[i:], m.CoinDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CoinDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentProcessor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentProcessor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentProcessor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.ValidatorsPercentage.Size()
		i -= size
		if _, err := m.ValidatorsPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ProcessorPercentage.Size()
		i -= size
		if _, err := m.ProcessorPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoinDenom) > 0 {
		i -= len(m.CoinDenom)
		copy(dAtA[i:], m.CoinDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CoinDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EngineVersion != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EngineVersion))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DistrEpochIdentifier) > 0 {
		i -= len(m.DistrEpochIdentifier)
		copy(dAtA[i:], m.DistrEpochIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DistrEpochIdentifier)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.UpdateUsernameFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxTransferFee.Size()
		i -= size
		if _, err := m.MaxTransferFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MinTransferFee.Size()
		i -= size
		if _, err := m.MinTransferFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.UpdateItemStringFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ItemTransferFeePercentage.Size()
		i -= size
		if _, err := m.ItemTransferFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.RecipeFeePercentage.Size()
		i -= size
		if _, err := m.RecipeFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PaymentProcessors) > 0 {
		for iNdEx := len(m.PaymentProcessors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentProcessors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CoinIssuers) > 0 {
		for iNdEx := len(m.CoinIssuers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinIssuers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoogleInAppPurchasePackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PackageName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProductID)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *CoinIssuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoinDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.Packages) > 0 {
		for _, e := range m.Packages {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = len(m.GoogleInAppPurchasePubKey)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.EntityName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *PaymentProcessor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoinDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.ProcessorPercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ValidatorsPercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinIssuers) > 0 {
		for _, e := range m.CoinIssuers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PaymentProcessors) > 0 {
		for _, e := range m.PaymentProcessors {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.RecipeFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ItemTransferFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.UpdateItemStringFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinTransferFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxTransferFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.UpdateUsernameFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.DistrEpochIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.EngineVersion != 0 {
		n += 1 + sovParams(uint64(m.EngineVersion))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoogleInAppPurchasePackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleInAppPurchasePackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleInAppPurchasePackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinIssuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinIssuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinIssuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packages = append(m.Packages, GoogleInAppPurchasePackage{})
			if err := m.Packages[len(m.Packages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleInAppPurchasePubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleInAppPurchasePubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentProcessor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentProcessor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentProcessor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessorPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProcessorPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssuers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinIssuers = append(m.CoinIssuers, CoinIssuer{})
			if err := m.CoinIssuers[len(m.CoinIssuers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentProcessors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentProcessors = append(m.PaymentProcessors, PaymentProcessor{})
			if err := m.PaymentProcessors[len(m.PaymentProcessors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecipeFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemTransferFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemTransferFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateItemStringFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateItemStringFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTransferFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTransferFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTransferFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxTransferFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUsernameFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdateUsernameFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineVersion", wireType)
			}
			m.EngineVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EngineVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
